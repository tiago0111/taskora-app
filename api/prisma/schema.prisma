generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  name             String
  password         String
  role             Role               @default(USER)
  bio              String?
  avatarUrl        String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  projects         Project[]          @relation("UserProjects")
  tasksAssigned    Task[]             @relation("AssignedTasks")
  pomodoroSessions PomodoroSession[]
  teams            ProjectsOnUsers[]
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  status      String   @default("Planeamento")
  progress    Int      @default(0)
  startDate   DateTime?
  endDate     DateTime?
  priority    Priority @default(MEDIA)
  color       String?  @default("#7c3aed")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ownerId     Int
  owner       User     @relation("UserProjects", fields: [ownerId], references: [id])

  tasks       Task[]
  members     ProjectsOnUsers[]

  @@unique([ownerId, name]) // <-- ALTERAÇÃO ADICIONADA AQUI
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  status      Status   @default(PENDENTE)
  priority    Priority @default(MEDIA)
  dueDate     DateTime?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projectId   Int
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assigneeId  Int
  assignee    User     @relation("AssignedTasks", fields: [assigneeId], references: [id])

  pomodoroSessions PomodoroSession[]
}

model PomodoroSession {
  id        Int          @id @default(autoincrement())
  duration  Int
  mode      PomodoroMode @default(TRABALHO)
  createdAt DateTime     @default(now())

  userId    Int
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  taskId    Int?
  task      Task?        @relation(fields: [taskId], references: [id])
}

// Tabela de junção M:N
model ProjectsOnUsers {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  Int
  assignedAt DateTime @default(now())

  @@id([userId, projectId])
}

enum Status {
  PENDENTE
  EM_PROGRESSO
  EM_REVISAO
  CONCLUIDA
}

enum Priority {
  ALTA
  MEDIA
  BAIXA
}

enum PomodoroMode {
  TRABALHO
  PAUSA_CURTA
  PAUSA_LONGA
}

enum Role {
  USER
  ADMIN
}